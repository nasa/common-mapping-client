# ---------------------------------------------------------------
# Defaults
# ---------------------------------------------------------------
stages:
  - environment
  - build
  - test
  - release
  - docker
  - docs

default:
  tags: ["api-common"]
  image: gitlab-registry.ifremer.fr/ifremer-commons/docker/images/node:12

# ---------------------------------------------------------------
# Global variables
# ---------------------------------------------------------------

variables:
  DOCKER_IMAGE_REGISTRY: gitlab-registry.ifremer.fr/ifremer-commons/docker/images/
  CI_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:develop
  BUILD_CACHE_DIR: /tmp/.build-cache
  DOCKER_BUILDKIT: 1
  ENV_FILE: variables.env
  BUILD_ARTIFACT: dist

# ---------------------------------------------------------------
# Jobs templates
# ---------------------------------------------------------------
.configure-git-template: &git-setup
  before_script:
    - echo "fetch origin"
    - git remote set-url origin "https://gitlab+access-token:${CI_ACCESS_TOKEN}@gitlab.ifremer.fr/${CI_PROJECT_PATH}.git"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git fetch origin

.docker:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} --password-stdin -u ${CI_REGISTRY_USER}
  after_script:
    - docker logout ${CI_REGISTRY}
  allow_failure: false

# ---------------------------------------------------------------
# Environment jobs : Create docker image for builds/release, this
# offers possibility to cache project dependencies so we don't
# have to download them every time.
# ---------------------------------------------------------------
build:env:
  extends: .docker
  stage: environment
  script:
    # Build and push the CI image
    - docker build --cache-from ${CI_BUILD_IMAGE} -t ${CI_BUILD_IMAGE} --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg="CACHE_DIR=${BUILD_CACHE_DIR}" --build-arg="IMAGE_REGISTRY=${DOCKER_IMAGE_REGISTRY}" -f docker/build/Dockerfile .
    - docker push ${CI_BUILD_IMAGE}
  except:
    - tags
    - master

# ---------------------------------------------------------------
# Build jobs
# ---------------------------------------------------------------
.build:
  stage: build
  needs: ["build:env"]
  script:
    # Get build cache dependencies
    - cp -R ${BUILD_CACHE_DIR}/* .
    # Build
    - npm run build
  after_script:
    # Remember version
    - APP_VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
  artifacts:
    paths:
      - ${BUILD_ARTIFACT}
    reports:
      dotenv: ${ENV_FILE}
    expire_in: 12 hours

build:
  extends: .build
  image: ${CI_BUILD_IMAGE}
  only:
    - develop

build:feature:
  extends: .build
  image: ${CI_BUILD_IMAGE}
  only:
    - /^feature\/.*/
  when: manual

# ---------------------------------------------------------------
# Tests jobs
# ---------------------------------------------------------------
.test:
  stage: test
  needs: ["build:env"]
  script:
    # Get project dependencies
    - cp -R ${BUILD_CACHE_DIR}/* .
    # Build
    - npm run test --includecoretests
  after_script:
    # Remember version
    - APP_VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
  when: manual

test:
  extends: .test
  image: ${CI_BUILD_IMAGE}
  except:
    - master
    - tags

# ---------------------------------------------------------------
# Release jobs
# ---------------------------------------------------------------
.release:
  <<: *git-setup
  stage: release
  script:
    - if [[ "_${RELEASE_VERSION}" == "_" ]]; then echo "The environment variable RELEASE_VERSION need to be setup." && exit 1; fi
    - echo "Release in progress"
    - git checkout -b release/${RELEASE_VERSION}
    - echo "manage app version"
    - 'current=`grep -oP "version\": \"\d+.\d+.\d+(-(alpha|beta|rc)[0-9]*)?" package.json | grep -m 1 -oP "\d+.\d+.\d+(-(alpha|beta|rc)[0-9]*)?"`'
    - 'sed -i "s/version\": \"$current\"/version\": \"${RELEASE_VERSION}\"/g" package.json'
    # Copy cached dependencies and build
    - ls -artl "${BUILD_CACHE_DIR}"
    - cp -R "${BUILD_CACHE_DIR}/node_modules" .
    # Build
    - npm run build
    # Git process for release (ISO gitflow)
    - git add .
    - git commit -m "Prepare release ${RELEASE_VERSION}"
    - git checkout master
    - git merge --no-ff --no-edit -m "Release ${RELEASE_VERSION}" "release/${RELEASE_VERSION}"
    - git tag -a "${RELEASE_VERSION}" -m "${RELEASE_VERSION}"
    - git checkout develop
    - git merge --no-ff --no-edit -m "[skip ci] Release ${RELEASE_VERSION}" "release/${RELEASE_VERSION}"
    - git push origin develop
    - git push origin master
    - git push --tags
    - git branch -D "release/${RELEASE_VERSION}"
  artifacts:
    paths:
      - ${BUILD_ARTIFACT}
    reports:
      dotenv: ${ENV_FILE}
    expire_in: 12 hours
  allow_failure: false
  only:
      - develop
  when: manual

release:
    extends: .release
    image: ${CI_BUILD_IMAGE}
    needs: [build]

gitlab-release:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    script:
        - echo "running release for ${CI_COMMIT_TAG}"
    release:
        name: "Release ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}"
        description: "Created using the release-cli $EXTRA_DESCRIPTION"
        tag_name: "${CI_COMMIT_TAG}"
        ref: "${CI_COMMIT_TAG}"
    only:
        - tags

# ---------------------------------------------------------------
# Docker jobs
# ---------------------------------------------------------------
.docker-build:
  extends: .docker
  stage: docker
  script:
    # Build docker image
    - docker pull ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} || true
    - docker build --cache-from ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --pull -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --build-arg="IMAGE_REGISTRY=${DOCKER_IMAGE_REGISTRY}" -f docker/run/Dockerfile .
    - docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}

docker:feature:
  extends: .docker-build
  needs: ["build:feature"]
  variables:
    IMAGE_TAG: feature
  only:
    - /^feature\/.*/
  when: manual

docker:develop:
  extends: .docker-build
  variables:
    IMAGE_TAG: develop
  needs: [build]
  only:
    - develop

docker:release:
  extends: .docker-build
  variables:
    IMAGE_TAG: ${APP_VERSION}
  needs: [release]
  only:
    - develop

# ---------------------------------------------------------------
# Docs jobs
# ---------------------------------------------------------------

pages:
  stage: docs
  image: python:3.7-alpine
  before_script:
    - apk --update --upgrade add gcc musl-dev jpeg-dev zlib-dev libffi-dev cairo-dev pango-dev gdk-pixbuf-dev
    - pip install --upgrade pip
    - pip install --upgrade mkdocs
    - pip install --upgrade mkdocs-pdf-export-plugin==0.5.5
  script:
    - mkdocs -v build
    - mv site public
  artifacts:
    paths:
      - public
  only:
    - develop
  when: manual

